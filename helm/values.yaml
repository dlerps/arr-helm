global:
  namespace: arr

  serviceAccount:
    # will create one service account per application with the name app-arr-sa
    nameSuffix: arr-sa
    autoMountServiceToken: true
    annotations: {}

  # Shared volumes between the applications & the outside world
  # ===========================================================
  # Priority: existingClaim > customVolumDef
  #
  # use an existing claim to attach a k8s volume (make sure to have RWX access mode)
  #
  # use customVolumeDef to define something like a hostPath of NFS volume:
  # customVolumDef:
  #   nfs:
  #      path: /path/to/download-temp
  #      server: "192.168.0.111"
  sharedVolumes:
    # temporary volume that is shared between sabNZBd, Radarr & Sonarr
    downloadTemp:
      existingClaim: ""
      customVolumDef: {}
    # mounts for permanent media storage shared with Sonarr
    tv: []
      # - mountPath: /tv
      #   existingClaim: ""
      #   customVolumeDef:
      #     nfs:
      #       path: /path/to/media
      #       server: "192.168.0.111"
    # mounts for permanent media storage shared with Radarr
    movies: []
      # - mountPath: /movies
      #   existingClaim: movies-pvc
      #   customVolumeDef: {}
    recycle: {}
  
  timezone: Europe/Berlin
  userId: 1000
  groupId: 1000

  # use cert-manager to issue certificates for the ingress routes
  autoTls:
    enabled: false
    issuer:
      name: letsencrypt-prod
      kind: ClusterIssuer

  ingress:
    enabled: false
    annotations: {}
    className: ""
    tls: false
    tlsSecretName: ""

sabNZBD:
  enabled: true
  name: sabnzbd
  image: linuxserver/sabnzbd
  tag: latest
  pullPolicy: Always
  serviceAccount:
    annotations: {}
  # needs global.ingress.enabled: true
  ingressRoutes: 
    - host: sabnzbd.local
      paths: 
        - path: /
          pathType: ImplementationSpecific
      autoTlsIssuer:
        kind: ""
        name: ""
      tlsSecretName: ""
  # Priority: existingClaim > storageClass
  persistence:
    existingClaim: ""
    storageClass: default
    accessMode: ReadWriteOnce
    size: 3Gi
  env: []
  scripts:
    - postProcess: |
        #!/bin/sh
        echo "Post processing script"
        echo "Moving $1 to /downloads/complete"
        mv $1 /downloads/complete
  annotations: {}
  probes:
    readinessProbe:
      failureThreshold: 5
      timeoutSeconds: 5
      periodSeconds: 20
      httpGet:
        port: 8080
        path: /api?mode=version
    livenessProbe:
      failureThreshold: 3
      timeoutSeconds: 5
      periodSeconds: 20
      initialDelaySeconds: 60
      httpGet:
        port: 8080
        path: /api?mode=version
  resources:
    requests:
      cpu: 500m
      memory: 256Mi
    limits:
      cpu: "1"
      memory: 1Gi
  service:
    type: ClusterIP
    port: 8080
    annotations: {}

radarr:
  enabled: true
  name: radarr
  image: linuxserver/radarr
  tag: latest
  pullPolicy: Always
  serviceAccount:
    annotations: {}
  # needs global.ingress.enabled: true
  ingressRoutes:
    - host: radarr.local
      paths: 
        - path: /
          pathType: ImplementationSpecific
      autoTlsIssuer:
        kind: ""
        name: ""
      tlsSecretName: ""
  persistence:
    existingClaim: ""
    storageClass: default
    accessMode: ReadWriteOnce
    size: 3Gi
  env: []
  annotations: {}
  probes:
    readinessProbe:
      failureThreshold: 5
      timeoutSeconds: 5
      periodSeconds: 20
      httpGet:
        port: 7878
        path: /ping
    livenessProbe:
      failureThreshold: 3
      timeoutSeconds: 5
      periodSeconds: 20
      initialDelaySeconds: 60
      httpGet:
        port: 7878
        path: /ping
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
    limits:
      cpu: "1"
      memory: 1Gi
  service:
    type: ClusterIP
    port: 7878
    annotations: {}

sonarr:
  enabled: true
  name: sonarr
  image: linuxserver/sonarr
  tag: latest
  pullPolicy: Always
  serviceAccount:
    annotations: {}
  # needs global.ingress.enabled: true
  ingressRoutes:
    - host: sonarr.local
      paths: 
        - path: /
          pathType: ImplementationSpecific
      autoTlsIssuer:
        kind: ""
        name: ""
      tlsSecretName: ""
  persistence:
    existingClaim: ""
    storageClass: default
    accessMode: ReadWriteOnce
    size: 3Gi
  env: []
  annotations: {}
  probes:
    readinessProbe:
      failureThreshold: 5
      timeoutSeconds: 5
      periodSeconds: 20
      httpGet:
        port: 8989
        path: /ping
    livenessProbe:
      failureThreshold: 3
      timeoutSeconds: 5
      periodSeconds: 20
      initialDelaySeconds: 60
      httpGet:
        port: 8989
        path: /ping
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
    limits:
      cpu: "1"
      memory: 1Gi
  service:
    type: ClusterIP
    port: 8989
    annotations: {}

overseerr:
  enabled: true
  name: overseerr
  image: linuxserver/overseerr
  tag: latest
  pullPolicy: Always
  serviceAccount:
    annotations: {}
  # needs global.ingress.enabled: true
  ingressRoute:
    - host: overseerr.local
      autoTlsIssuer: ""
      tlsSecretName: ""
  persistence:
    existingClaim: ""
    storageClass: default
    accessMode: ReadWriteOnce
    size: 3Gi
  env: []
  annotations: {}
